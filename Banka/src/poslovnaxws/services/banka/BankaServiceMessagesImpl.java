/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package poslovnaxws.services.banka;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;

import javax.ejb.EJB;
import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.util.JAXBSource;
import javax.xml.namespace.QName;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.ws.Service;

import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import poslovnaxws.banke.Preseci;
import poslovnaxws.banke.Presek;
import poslovnaxws.banke.Uplata;
import poslovnaxws.banke.ZahtevZaIzvod;
import poslovnaxws.common.Status;
import poslovnaxws.common.TBanka;
import poslovnaxws.common.TNalog;
import poslovnaxws.poruke.MT103;
import poslovnaxws.poruke.MT103Wrapper;
import poslovnaxws.services.centralnabanka.CBClearing;
import poslovnaxws.test.Temp;
import sessionbeans.concrete.PreseciDaoLocal;
import util.JndiUtils;

/**
 * This class was generated by Apache CXF 2.6.5 2015-06-19T00:21:24.525+02:00
 * Generated source version: 2.6.5
 * 
 */

@javax.jws.WebService(serviceName = "BankaService", portName = "BankaServicePort", targetNamespace = "PoslovnaXWS/services/banka", wsdlLocation = "file:/C:/Users/Lazar/Desktop/Faks/PI/PoslovnaXWS/Banka/WEB-INF/wsdl/Banka.wsdl", endpointInterface = "poslovnaxws.services.banka.BankaServiceMessages")
public class BankaServiceMessagesImpl implements BankaServiceMessages {
	
	private static String PORUKE_XSD = "../webapps/banka/WEB-INF/xsd/Poruke.xsd";
	private static String BANKE_XSD = "../webapps/banka/WEB-INF/xsd/Banke.xsd";
	private static String COMMON_XSD = "../webapps/banka/WEB-INF/xsd/Common.xsd";

	@EJB
	private PreseciDaoLocal presekDao = JndiUtils
			.getLocalEJB(JndiUtils.PRESECI_DAO);

	private static final Logger LOG = Logger
			.getLogger(BankaServiceMessagesImpl.class.getName());

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * poslovnaxws.services.banka.BankaServiceMessages#receiveMT103(poslovnaxws
	 * .poruke.MT103 mt103 )*
	 */
	public poslovnaxws.common.Status receiveMT103(poslovnaxws.poruke.MT103 mt103) {
		LOG.info("Executing operation receiveMT103");
		System.out.println(mt103);
		try {
			poslovnaxws.common.Status _return = validate(mt103, PORUKE_XSD);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * poslovnaxws.services.banka.BankaServiceMessages#receiveMT102(poslovnaxws
	 * .poruke.MT102 mt102 )*
	 */
	public poslovnaxws.common.Status receiveMT102(poslovnaxws.poruke.MT102 mt102) {
		LOG.info("Executing operation receiveMT102");
		System.out.println(mt102);
		try {
			poslovnaxws.common.Status _return = validate(mt102, PORUKE_XSD);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * poslovnaxws.services.banka.BankaServiceMessages#receiveMT900(poslovnaxws
	 * .poruke.MT900 mt900 )*
	 */
	public poslovnaxws.common.Status receiveMT900(poslovnaxws.poruke.MT900 mt900) {
		LOG.info("Executing operation receiveMT900");
		System.out.println(mt900);
		Temp.sendMT103(new MT103());
		try {
			poslovnaxws.common.Status _return = validate(mt900, PORUKE_XSD);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * poslovnaxws.services.banka.BankaServiceMessages#receiveMT910(poslovnaxws
	 * .poruke.MT910 mt910 )*
	 */
	public poslovnaxws.common.Status receiveMT910(poslovnaxws.poruke.MT910 mt910) {
		LOG.info("Executing operation receiveMT910");
		
		try {
			poslovnaxws.common.Status _return = validate(mt910, PORUKE_XSD);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	@Override
	public Presek zahtevZaIzvod(ZahtevZaIzvod zahtevZaIzvod)
			throws NotificationMessage {
		System.out.println("Executing operation zahtevZaIzvod");
		Preseci preseci = null;
		
		poslovnaxws.common.Status status = validate(zahtevZaIzvod, BANKE_XSD);
		
		//0 = OK
		if (status.getKod() != 0)
			throw new NotificationMessage();

		try {
			preseci = presekDao.findById(zahtevZaIzvod.getDatum().toString());
			System.out.println(zahtevZaIzvod.getRedniBrojPreseka().intValue());
			return preseci.getPresek().get(
					zahtevZaIzvod.getRedniBrojPreseka().intValue());

		} catch (Exception e) {
			e.printStackTrace();
			throw new NotificationMessage();
		}
	}
	
	@Override
	public Status receiveUplata(Uplata uplata) {
		System.out.println("Executing operation receiveUplata");
		
		poslovnaxws.common.Status status = validate(uplata, BANKE_XSD);
		
		if(status.getKod() != 0){
			return status;
		}
		
		MT103 mt103 = new MT103();
		TNalog nalog = uplata.getNalog();
		
		mt103.setUplata(nalog);
		
		mt103.setBankaDuznik((TBanka) nalog.getDuznik());
		mt103.setBankaPoverioc((TBanka) nalog.getPrimalac());
	
		mt103.setId("123");
		
		status = sendMT103(mt103);
		
		return status;
	}

	private Status validate(Object message, String xsdLocation) {
		Status _return = new Status();
		try {
			JAXBContext jc = JAXBContext.newInstance(message.getClass());
			JAXBSource source = new JAXBSource(jc, message);

			SchemaFactory sf = SchemaFactory
					.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
			Schema schema = sf.newSchema(new File(xsdLocation));
			System.out.println(schema);

			javax.xml.validation.Validator validator = schema.newValidator();
			validator.validate(source);
			
			_return.setKod(0);
			_return.setOpis("OK");

		} catch (JAXBException e) {
			_return.setKod(1);
			_return.setOpis("JAXB exception");
			LOG.warning(e.getMessage());
			e.printStackTrace();
		} catch (SAXParseException e) {
			_return.setKod(2);
			_return.setOpis("Invalid XML");
			LOG.warning(e.getMessage());
			e.printStackTrace();
		} catch (SAXException e) {
			_return.setKod(3);
			_return.setOpis("SAX exception");
			LOG.warning(e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			_return.setKod(4);
			_return.setOpis("IO exception");
			LOG.warning(e.getMessage());
		} catch (Exception e) {
			_return.setKod(5);
			_return.setOpis("???");
			e.printStackTrace();
		}
		return _return;
	}
	

	public static String BANKA_WSDL = "http://localhost:8080/CentralnaBanka/services/CBClearing?wsdl";

	private CBClearing createBankaService() {
		URL wsdl;
		try {
			wsdl = new URL(
					"http://localhost:8080/CentralnaBanka/services/CBClearing?wsdl");

			QName serviceName = new QName("PoslovnaXWS/services/centralnaBanka",
					"CBService");
			QName portName = new QName("PoslovnaXWS/services/centralnaBanka",
					"CBClearingPort");
			
			Service service = Service.create(wsdl, serviceName);
			
			return service.getPort(portName, CBClearing.class);

		} catch (MalformedURLException e1) {
			e1.printStackTrace();
		}
		
		return null;

	}

	private Status sendMT103(MT103 message) {
		
		CBClearing banka = createBankaService();
		MT103Wrapper wrapper = new MT103Wrapper();
		wrapper.setWrappedParameter(message);
		return banka.receiveMT103Clearing(wrapper).getWrappedParameter();
	}
	
	/*public static void sendMT910(MT910 message, String url) {
		
		BankaServiceMessages banka = createBankaService(url);
		
		banka.receiveMT910(message);
	}
	
	public static void sendMT102(MT102 message, String url) {
		
		BankaServiceMessages banka = createBankaService(url);
		
		banka.receiveMT102(message);
	}
	
	public static void sendMT103(MT103 message, String url) {
		
		BankaServiceMessages banka = createBankaService(url);
		
		banka.receiveMT103(message);
	}
	
	public static Presek getPresek(ZahtevZaIzvod zahtevZaIzvod, String url) {
		
		BankaServiceMessages banka = createBankaService(url);
		
		try {
			return banka.zahtevZaIzvod(zahtevZaIzvod);
		} catch (NotificationMessage e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}
	
	public static void main(String[] args) {
		sendMT900(new MT900(), BANKA_WSDL);
		sendMT910(new MT910(), BANKA_WSDL);
		
		Presek presek = getPresek(new ZahtevZaIzvod(), BANKA_WSDL);
		System.out.println(presek);
	}*/


}
